

/*3.Сценарии промежуточного алгоритма: Суммировать все простые числа
Простое число - это целое число больше 1 с двумя делителями: 1 и само себя. 
Например, 2 - простое число, потому что оно делится только на 1 и 2. 
Напротив, 4 не является простым числом, поскольку делится на 1, 2 и 4.

Перепишите sumPrimes так, чтобы оно возвращало сумму всех простых чисел, 
которые меньше или равны num.*/

/*Intermediate Algorithm Scripting: Sum All Primes
A prime number is a whole number greater than 1 with exactly two divisors: 
1 and itself. For example, 2 is a prime number because it is only divisible
 by 1 and 2. In contrast, 4 is not prime since it is divisible by 1, 2 and 4.

Rewrite sumPrimes so it returns the sum of all prime numbers that are less
 than or equal to num.*/

/*Первый очевидный шаг - увеличить переменную i до любого значения, переданного
 функции в качестве аргумента в sumPrimes (num). Мы сделаем это с помощью цикла for, 
 который будет выполняться до тех пор, пока он не станет равным num. Поскольку
  простые числа должны быть больше 1, мы начнем цикл с 2.Нам нужно проверить, 
  является ли каждое отдельное число простым числом. Для этого нам нужно написать 
  функцию (checkPrime) и вызывать эту функцию на каждой итерации нашего цикла for.
  checkPrime требует, чтобы другая переменная выполняла итерацию в соответствии с 
  аргументом (i) в checkPrime. Назовем это k. Для каждой итерации k мы хотим 
  проверить, делится ли i на k. Если да, то это не простое число, и нам нужно 
  вернуть результат как false. Если цикл завершается, число должно быть простым,
и мы можем вернуть результат true. Мы добавим оператор if, чтобы функция checkPrime 
могла понять этот результат.Нам нужно вернуть сумму всех простых чисел, поэтому
 нам нужна переменная для хранения этих чисел, которые оказываются простыми 
 (мы назовем эту sum), и оператор if. Очевидно, что если checkPrime (i) 
 возвращает true, мы хотим добавить i к сумме, поэтому мы включим все это в 
 оператор if.*/
function sumPrimes(num) {
 
 var sum = 0;
 
 function checkPrime(i){
  for (var k = 2; k < i ; k++){ /*Нам нужно проверить, является ли каждое отдельное число простым числом. Для этого нам нужно написать функцию (checkPrime) и вызывать эту функцию на каждой итерации нашего цикла for.*/
   if (i % k === 0){
    return false; //не простое число, и нам нужно вернуть результат как false.
   }
  }
  return true;
 }
 
 for (var i = 2; i <= num; i++){
  if (checkPrime(i)){
   sum += i;
   }
  }
 return sum;
}




console.log(sumPrimes(10)); // return 17
//console.log(sumPrimes(977)); //return 73156.







